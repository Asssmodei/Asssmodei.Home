import torch
from torch.utils.data import DataLoader


def train_step(model: torch.nn.Module,
               dataset:torch.utils.data.DataLoader,
               loss_func:torch.nn.Module,
               accuracy_func,
               optimizer):
    loss, acc = 0, 0
    model.eval()
    for X, y in enumerate(dataset):
        y_pred = model(X)
        loss += loss_func(y_pred, y)
        acc += accuracy_func(y_pred.argmax(dim=1), y)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    loss /= len(dataset)
    acc /= len(dataset)
    print(f"Train loss: {loss:.5f} | Train accuracy: {acc:.2f}%")


def test_step(model,
              test_dataset,
              loss,
              acc,
              optimizer):
    test_loss, acc_loss = 0, 0
    model.eval()
    with torch.inference_mode():
        for X, y in test_dataset:
            y_pred = model(X)
            test_loss += loss(y_pred, y)
            acc_loss += acc(y, y_pred.argmax(dim=1))
    test_loss /= len(test_dataset)
    acc_loss /= len(test_dataset)
    print(f"Test loss: {test_loss:.5f} | Test accuracy: {acc_loss:.2f}%\n")
