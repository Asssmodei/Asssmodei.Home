import torch
from torch import nn
from sklearn.datasets import make_blobs
from sklearn.model_selection import train_test_split


def accuracy_func(y_true, y_pred):
    correct = torch.eq(y_true, y_pred).sum().item()
    acc = (correct / len(y_pred)) * 100
    return acc


NUM_CLASSES = 4
NUM_FEATURES = 2
RANDOM_SEED = 42

X_blob, y_blob = make_blobs(n_samples=1000, n_features=NUM_FEATURES, centers=NUM_CLASSES, random_state=RANDOM_SEED,
                            cluster_std=1.5)
X_blob = torch.from_numpy(X_blob).type(torch.float)
y_blob = torch.from_numpy(y_blob).type(torch.LongTensor)
X_train, X_test, y_train, y_test = train_test_split(X_blob, y_blob, test_size=0.2, random_state=RANDOM_SEED)


class BlobModel(nn.Module):
    def __init__(self, input_features, output_features, hidden_units=8):
        super().__init__()
        self.relu = nn.ReLU()
        self.linear_layer_stack = nn.Sequential(
            nn.Linear(in_features=input_features, out_features=hidden_units),
            self.relu,
            nn.Linear(in_features=hidden_units, out_features=hidden_units),
            self.relu,
            nn.Linear(in_features=hidden_units, out_features=output_features)
        )

    def forward(self, x):
        return self.linear_layer_stack(x)


model_4 = BlobModel(input_features=NUM_FEATURES, output_features=NUM_CLASSES)
loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(params=model_4.parameters(), lr=0.1)
torch.manual_seed(RANDOM_SEED)
epochs = 100
for epoch in range(epochs):
    model_4.train()
    y_raw_pred = model_4(X_train)
    y_pred_prob = torch.softmax(y_raw_pred, dim=1).argmax(dim=1)
    loss = loss_fn(y_pred_prob, y_train)
    acc = accuracy_func(y_train, y_pred_prob)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    model_4.eval()
    with torch.inference_mode():
        test_logits = model_4(X_test)
        test_pred = torch.softmax(test_logits, dim=1).argmax(dim=1)
        test_loss = loss_fn(test_pred, y_test)
        accuracy = accuracy_func(y_test, test_pred)
        if epoch % 10 == 0:
            print(
                f"Epoch: {epoch} | Loss: {loss:.5f}, Acc: {acc:.2f}% | Test Loss: {test_loss:.5f}, Test Acc:"f"{accuracy:.2f}%")


